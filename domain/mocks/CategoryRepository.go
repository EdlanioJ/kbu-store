// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/EdlanioJ/kbu-store/domain"
	mock "github.com/stretchr/testify/mock"
)

// CategoryRepository is an autogenerated mock type for the CategoryRepository type
type CategoryRepository struct {
	mock.Mock
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *CategoryRepository) FindByID(ctx context.Context, id string) (*domain.Category, error) {
	ret := _m.Called(ctx, id)

	var r0 *domain.Category
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Category); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Category)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: ctx, Category
func (_m *CategoryRepository) Store(ctx context.Context, Category *domain.Category) error {
	ret := _m.Called(ctx, Category)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Category) error); ok {
		r0 = rf(ctx, Category)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, Category
func (_m *CategoryRepository) Update(ctx context.Context, Category *domain.Category) error {
	ret := _m.Called(ctx, Category)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Category) error); ok {
		r0 = rf(ctx, Category)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
