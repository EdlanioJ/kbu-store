// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/EdlanioJ/kbu-store/app/domain"
	mock "github.com/stretchr/testify/mock"
)

// StoreUsecase is an autogenerated mock type for the StoreUsecase type
type StoreUsecase struct {
	mock.Mock
}

// Active provides a mock function with given fields: ctx, id
func (_m *StoreUsecase) Active(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Block provides a mock function with given fields: ctx, id
func (_m *StoreUsecase) Block(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, id
func (_m *StoreUsecase) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Disable provides a mock function with given fields: ctx, id
func (_m *StoreUsecase) Disable(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, id
func (_m *StoreUsecase) Get(ctx context.Context, id string) (*domain.Store, error) {
	ret := _m.Called(ctx, id)

	var r0 *domain.Store
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Store); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Store)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Index provides a mock function with given fields: ctx, sort, limit, page
func (_m *StoreUsecase) Index(ctx context.Context, sort string, limit int, page int) (domain.Stores, int64, error) {
	ret := _m.Called(ctx, sort, limit, page)

	var r0 domain.Stores
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) domain.Stores); ok {
		r0 = rf(ctx, sort, limit, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Stores)
		}
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) int64); ok {
		r1 = rf(ctx, sort, limit, page)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, int, int) error); ok {
		r2 = rf(ctx, sort, limit, page)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Store provides a mock function with given fields: ctx, param
func (_m *StoreUsecase) Store(ctx context.Context, param *domain.CreateStoreRequest) error {
	ret := _m.Called(ctx, param)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.CreateStoreRequest) error); ok {
		r0 = rf(ctx, param)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, param
func (_m *StoreUsecase) Update(ctx context.Context, param *domain.UpdateStoreRequest) error {
	ret := _m.Called(ctx, param)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.UpdateStoreRequest) error); ok {
		r0 = rf(ctx, param)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
