// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/EdlanioJ/kbu-store/app/domain"
	mock "github.com/stretchr/testify/mock"
)

// StoreRepository is an autogenerated mock type for the StoreRepository type
type StoreRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, store
func (_m *StoreRepository) Create(ctx context.Context, store *domain.Store) error {
	ret := _m.Called(ctx, store)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Store) error); ok {
		r0 = rf(ctx, store)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, id
func (_m *StoreRepository) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: ctx, sort, limit, page
func (_m *StoreRepository) FindAll(ctx context.Context, sort string, limit int, page int) (domain.Stores, int64, error) {
	ret := _m.Called(ctx, sort, limit, page)

	var r0 domain.Stores
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) domain.Stores); ok {
		r0 = rf(ctx, sort, limit, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Stores)
		}
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) int64); ok {
		r1 = rf(ctx, sort, limit, page)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, int, int) error); ok {
		r2 = rf(ctx, sort, limit, page)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *StoreRepository) FindByID(ctx context.Context, id string) (*domain.Store, error) {
	ret := _m.Called(ctx, id)

	var r0 *domain.Store
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Store); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Store)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByName provides a mock function with given fields: ctx, name
func (_m *StoreRepository) FindByName(ctx context.Context, name string) (*domain.Store, error) {
	ret := _m.Called(ctx, name)

	var r0 *domain.Store
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Store); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Store)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, store
func (_m *StoreRepository) Update(ctx context.Context, store *domain.Store) error {
	ret := _m.Called(ctx, store)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Store) error); ok {
		r0 = rf(ctx, store)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
