// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StoreServiceClient is the client API for StoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StoreServiceClient interface {
	Create(ctx context.Context, in *CreateStoreRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetById(ctx context.Context, in *StoreRequest, opts ...grpc.CallOption) (*Store, error)
	GetByIdAndOwner(ctx context.Context, in *GetStoreByIdAndOwnerRequest, opts ...grpc.CallOption) (*Store, error)
	GetAll(ctx context.Context, in *GetAllStoreRequest, opts ...grpc.CallOption) (*ListStoreResponse, error)
	GetAllByCategory(ctx context.Context, in *ListStoreRequest, opts ...grpc.CallOption) (*ListStoreResponse, error)
	GetAllByCloseLocation(ctx context.Context, in *ListStoreByLocationRequest, opts ...grpc.CallOption) (*ListStoreResponse, error)
	GetAllByOwner(ctx context.Context, in *ListStoreRequest, opts ...grpc.CallOption) (*ListStoreResponse, error)
	GetAllByTags(ctx context.Context, in *ListStoreByTagsRequest, opts ...grpc.CallOption) (*ListStoreResponse, error)
	GetAllByStatus(ctx context.Context, in *ListStoreByStatusRequest, opts ...grpc.CallOption) (*ListStoreResponse, error)
	Active(ctx context.Context, in *StoreRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Block(ctx context.Context, in *StoreRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Disable(ctx context.Context, in *StoreRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Update(ctx context.Context, in *UpdateStoreRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Delete(ctx context.Context, in *StoreRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type storeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStoreServiceClient(cc grpc.ClientConnInterface) StoreServiceClient {
	return &storeServiceClient{cc}
}

func (c *storeServiceClient) Create(ctx context.Context, in *CreateStoreRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.edlanioj.kbu_store.StoreService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) GetById(ctx context.Context, in *StoreRequest, opts ...grpc.CallOption) (*Store, error) {
	out := new(Store)
	err := c.cc.Invoke(ctx, "/github.com.edlanioj.kbu_store.StoreService/GetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) GetByIdAndOwner(ctx context.Context, in *GetStoreByIdAndOwnerRequest, opts ...grpc.CallOption) (*Store, error) {
	out := new(Store)
	err := c.cc.Invoke(ctx, "/github.com.edlanioj.kbu_store.StoreService/GetByIdAndOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) GetAll(ctx context.Context, in *GetAllStoreRequest, opts ...grpc.CallOption) (*ListStoreResponse, error) {
	out := new(ListStoreResponse)
	err := c.cc.Invoke(ctx, "/github.com.edlanioj.kbu_store.StoreService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) GetAllByCategory(ctx context.Context, in *ListStoreRequest, opts ...grpc.CallOption) (*ListStoreResponse, error) {
	out := new(ListStoreResponse)
	err := c.cc.Invoke(ctx, "/github.com.edlanioj.kbu_store.StoreService/GetAllByCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) GetAllByCloseLocation(ctx context.Context, in *ListStoreByLocationRequest, opts ...grpc.CallOption) (*ListStoreResponse, error) {
	out := new(ListStoreResponse)
	err := c.cc.Invoke(ctx, "/github.com.edlanioj.kbu_store.StoreService/GetAllByCloseLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) GetAllByOwner(ctx context.Context, in *ListStoreRequest, opts ...grpc.CallOption) (*ListStoreResponse, error) {
	out := new(ListStoreResponse)
	err := c.cc.Invoke(ctx, "/github.com.edlanioj.kbu_store.StoreService/GetAllByOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) GetAllByTags(ctx context.Context, in *ListStoreByTagsRequest, opts ...grpc.CallOption) (*ListStoreResponse, error) {
	out := new(ListStoreResponse)
	err := c.cc.Invoke(ctx, "/github.com.edlanioj.kbu_store.StoreService/GetAllByTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) GetAllByStatus(ctx context.Context, in *ListStoreByStatusRequest, opts ...grpc.CallOption) (*ListStoreResponse, error) {
	out := new(ListStoreResponse)
	err := c.cc.Invoke(ctx, "/github.com.edlanioj.kbu_store.StoreService/GetAllByStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) Active(ctx context.Context, in *StoreRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.edlanioj.kbu_store.StoreService/Active", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) Block(ctx context.Context, in *StoreRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.edlanioj.kbu_store.StoreService/Block", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) Disable(ctx context.Context, in *StoreRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.edlanioj.kbu_store.StoreService/Disable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) Update(ctx context.Context, in *UpdateStoreRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.edlanioj.kbu_store.StoreService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) Delete(ctx context.Context, in *StoreRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/github.com.edlanioj.kbu_store.StoreService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StoreServiceServer is the server API for StoreService service.
// All implementations must embed UnimplementedStoreServiceServer
// for forward compatibility
type StoreServiceServer interface {
	Create(context.Context, *CreateStoreRequest) (*empty.Empty, error)
	GetById(context.Context, *StoreRequest) (*Store, error)
	GetByIdAndOwner(context.Context, *GetStoreByIdAndOwnerRequest) (*Store, error)
	GetAll(context.Context, *GetAllStoreRequest) (*ListStoreResponse, error)
	GetAllByCategory(context.Context, *ListStoreRequest) (*ListStoreResponse, error)
	GetAllByCloseLocation(context.Context, *ListStoreByLocationRequest) (*ListStoreResponse, error)
	GetAllByOwner(context.Context, *ListStoreRequest) (*ListStoreResponse, error)
	GetAllByTags(context.Context, *ListStoreByTagsRequest) (*ListStoreResponse, error)
	GetAllByStatus(context.Context, *ListStoreByStatusRequest) (*ListStoreResponse, error)
	Active(context.Context, *StoreRequest) (*empty.Empty, error)
	Block(context.Context, *StoreRequest) (*empty.Empty, error)
	Disable(context.Context, *StoreRequest) (*empty.Empty, error)
	Update(context.Context, *UpdateStoreRequest) (*empty.Empty, error)
	Delete(context.Context, *StoreRequest) (*empty.Empty, error)
	mustEmbedUnimplementedStoreServiceServer()
}

// UnimplementedStoreServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStoreServiceServer struct {
}

func (UnimplementedStoreServiceServer) Create(context.Context, *CreateStoreRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedStoreServiceServer) GetById(context.Context, *StoreRequest) (*Store, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedStoreServiceServer) GetByIdAndOwner(context.Context, *GetStoreByIdAndOwnerRequest) (*Store, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByIdAndOwner not implemented")
}
func (UnimplementedStoreServiceServer) GetAll(context.Context, *GetAllStoreRequest) (*ListStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedStoreServiceServer) GetAllByCategory(context.Context, *ListStoreRequest) (*ListStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllByCategory not implemented")
}
func (UnimplementedStoreServiceServer) GetAllByCloseLocation(context.Context, *ListStoreByLocationRequest) (*ListStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllByCloseLocation not implemented")
}
func (UnimplementedStoreServiceServer) GetAllByOwner(context.Context, *ListStoreRequest) (*ListStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllByOwner not implemented")
}
func (UnimplementedStoreServiceServer) GetAllByTags(context.Context, *ListStoreByTagsRequest) (*ListStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllByTags not implemented")
}
func (UnimplementedStoreServiceServer) GetAllByStatus(context.Context, *ListStoreByStatusRequest) (*ListStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllByStatus not implemented")
}
func (UnimplementedStoreServiceServer) Active(context.Context, *StoreRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Active not implemented")
}
func (UnimplementedStoreServiceServer) Block(context.Context, *StoreRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Block not implemented")
}
func (UnimplementedStoreServiceServer) Disable(context.Context, *StoreRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disable not implemented")
}
func (UnimplementedStoreServiceServer) Update(context.Context, *UpdateStoreRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedStoreServiceServer) Delete(context.Context, *StoreRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedStoreServiceServer) mustEmbedUnimplementedStoreServiceServer() {}

// UnsafeStoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StoreServiceServer will
// result in compilation errors.
type UnsafeStoreServiceServer interface {
	mustEmbedUnimplementedStoreServiceServer()
}

func RegisterStoreServiceServer(s grpc.ServiceRegistrar, srv StoreServiceServer) {
	s.RegisterService(&StoreService_ServiceDesc, srv)
}

func _StoreService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.edlanioj.kbu_store.StoreService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).Create(ctx, req.(*CreateStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.edlanioj.kbu_store.StoreService/GetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).GetById(ctx, req.(*StoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_GetByIdAndOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoreByIdAndOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).GetByIdAndOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.edlanioj.kbu_store.StoreService/GetByIdAndOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).GetByIdAndOwner(ctx, req.(*GetStoreByIdAndOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.edlanioj.kbu_store.StoreService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).GetAll(ctx, req.(*GetAllStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_GetAllByCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).GetAllByCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.edlanioj.kbu_store.StoreService/GetAllByCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).GetAllByCategory(ctx, req.(*ListStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_GetAllByCloseLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStoreByLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).GetAllByCloseLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.edlanioj.kbu_store.StoreService/GetAllByCloseLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).GetAllByCloseLocation(ctx, req.(*ListStoreByLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_GetAllByOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).GetAllByOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.edlanioj.kbu_store.StoreService/GetAllByOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).GetAllByOwner(ctx, req.(*ListStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_GetAllByTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStoreByTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).GetAllByTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.edlanioj.kbu_store.StoreService/GetAllByTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).GetAllByTags(ctx, req.(*ListStoreByTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_GetAllByStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStoreByStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).GetAllByStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.edlanioj.kbu_store.StoreService/GetAllByStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).GetAllByStatus(ctx, req.(*ListStoreByStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_Active_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).Active(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.edlanioj.kbu_store.StoreService/Active",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).Active(ctx, req.(*StoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_Block_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).Block(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.edlanioj.kbu_store.StoreService/Block",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).Block(ctx, req.(*StoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_Disable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).Disable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.edlanioj.kbu_store.StoreService/Disable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).Disable(ctx, req.(*StoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.edlanioj.kbu_store.StoreService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).Update(ctx, req.(*UpdateStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.edlanioj.kbu_store.StoreService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).Delete(ctx, req.(*StoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StoreService_ServiceDesc is the grpc.ServiceDesc for StoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.edlanioj.kbu_store.StoreService",
	HandlerType: (*StoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _StoreService_Create_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _StoreService_GetById_Handler,
		},
		{
			MethodName: "GetByIdAndOwner",
			Handler:    _StoreService_GetByIdAndOwner_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _StoreService_GetAll_Handler,
		},
		{
			MethodName: "GetAllByCategory",
			Handler:    _StoreService_GetAllByCategory_Handler,
		},
		{
			MethodName: "GetAllByCloseLocation",
			Handler:    _StoreService_GetAllByCloseLocation_Handler,
		},
		{
			MethodName: "GetAllByOwner",
			Handler:    _StoreService_GetAllByOwner_Handler,
		},
		{
			MethodName: "GetAllByTags",
			Handler:    _StoreService_GetAllByTags_Handler,
		},
		{
			MethodName: "GetAllByStatus",
			Handler:    _StoreService_GetAllByStatus_Handler,
		},
		{
			MethodName: "Active",
			Handler:    _StoreService_Active_Handler,
		},
		{
			MethodName: "Block",
			Handler:    _StoreService_Block_Handler,
		},
		{
			MethodName: "Disable",
			Handler:    _StoreService_Disable_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _StoreService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _StoreService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protofiles/store.proto",
}
